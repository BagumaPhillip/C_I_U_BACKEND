generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model LecturerSignUp {
  id               Int       @id @default(autoincrement())
  first_name       String
  last_name        String
  email            String    @unique
  role             String
  token            String?
  tokenExpiry      DateTime?
  password       String?   // Password field for storing hashed password
  resetToken       String?   @unique
  resetTokenExpiry DateTime?
}

model AdminSignUp {
  id               Int       @id @default(autoincrement())
  first_name       String
  last_name        String
  email            String    @unique
  role             String
  password         String
  resetToken       String?   @unique
  resetTokenExpiry DateTime?
}

model users {
  id               Int           @id @default(autoincrement())
  first_name       String
  last_name        String
  email            String        @unique
  program          String
  createdAt        DateTime      @default(now())
  lastLogin        DateTime?
  registrationNo   String        @unique
  password         String
  role             String
  resetToken       String?       @unique
  resetTokenExpiry DateTime?
  courseId         Int
  issueReports     IssueReport[] @relation("StudentReports")
  submissions      Submission[]
  course           courses       @relation(fields: [courseId], references: [id])
  courses          courses[]     @relation("UserCourses")
}

model IssueReport {
  id               Int      @id @default(autoincrement())
  issueDescription String
  regno            String
  reportedAt       DateTime @default(now())
  studentId        Int
  student          users    @relation("StudentReports", fields: [studentId], references: [id])
}

model FAQ {
  id       Int    @id @default(autoincrement())
  question String
  answer   String
}

model Submission {
  id           Int              @id @default(autoincrement())
  studentId    Int
  assessmentId Int
  answers      Json
  score        Int
  percentage   Float
  submittedAt  DateTime
  assessment   ManualAssessment @relation(fields: [assessmentId], references: [id])
  student      users            @relation(fields: [studentId], references: [id])
}

model courses {
  id                Int                @id @default(autoincrement())
  facultyName       String
  courseName        String
  courseUnits       String[]
  courseUnitCode    String
  manualAssessments ManualAssessment[]
  addAssessments    addAssessment[]
  users             users[]
  students          users[]            @relation("UserCourses")
}

model addAssessment {
  id             Int        @id @default(autoincrement())
  title          String
  description    String
  courseId       Int
  courseUnit     String
  courseUnitCode String
  duration       String
  scheduledDate  DateTime
  startTime      DateTime
  endTime        DateTime
  createdBy      String
  createdAt      DateTime   @default(now())
  questions      Question[] @relation("AssessmentQuestions")
  course         courses    @relation(fields: [courseId], references: [id])
  status         String     @default("draft") // New field to track status
  isDraft        Boolean    @default(true) // Add this line
}

model Question {
  id           Int           @id @default(autoincrement())
  content      String
  answer       String?
  options      Json
  assessmentId Int
  assessment   addAssessment @relation("AssessmentQuestions", fields: [assessmentId], references: [id])
}

model ManualAssessment {
 id             Int        @id @default(autoincrement())
  title          String
  description    String
  courseId       Int
  courseUnit     String
  courseUnitCode String
  duration       String
  scheduledDate  DateTime
  startTime      DateTime
  endTime        DateTime
  createdBy      String
  createdAt      DateTime   @default(now())
  questions      QuestionManual[]
  course         courses    @relation(fields: [courseId], references: [id])
  status         String     @default("draft") // New field to track status
  isDraft        Boolean    @default(true) // Add this line
  submissions    Submission[]
}

model QuestionManual {
   id           Int           @id @default(autoincrement())
  content      String
  answer       String?
  options      Json
  assessmentId Int
  assessment    ManualAssessment @relation(fields: [assessmentId], references:Â [id])
}

model Chat {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  participants users[]   @relation("UserChats") // Many-to-many with users
  messages     Message[] @relation("ChatMessages") // One-to-many with Message
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  chatId    Int
  chat      Chat     @relation("ChatMessages", fields: [chatId], references: [id], onDelete: Cascade)
  senderId  Int // ID of the user sending the message
  sender    users    @relation("UserMessages", fields: [senderId], references: [id])
}
