generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}





// registering a Lecturer

model LecturerSignUp {
  id         Int    @id @default(autoincrement())
  first_name String
  last_name  String
  email      String   @unique
  role       String
  password   String
}


model AdminSignUp  {
  id         Int    @id @default(autoincrement())
  first_name String
  last_name  String
  email      String   @unique
  role       String
  password   String
}



model users {
  id                Int              @id @default(autoincrement())
  first_name        String
  last_name         String
  email             String           @unique
  program           String
  createdAt        DateTime         @default(now())
  lastLogin         DateTime?
  registrationNo    String           @unique
  password          String
  role              String           // Add the role field here
  resetToken        String?          @unique
  resetTokenExpiry  DateTime?
  issueReports      IssueReport[]    @relation("StudentReports")
}

model IssueReport {
  id                Int              @id @default(autoincrement())
  issueDescription  String
  regno             String  
  reportedAt       DateTime         @default(now())
  studentId        Int
  student          users             @relation("StudentReports", fields: [studentId], references: [id])
}

model FAQ {
  id                Int              @id @default(autoincrement())
  question          String
  answer            String
}



// adding courses and course units
model courses {
  id              Int       @id @default(autoincrement())
  facultyName     String
  courseName     String
  courseUnits     String[]
  courseUnitCode    String
  addAssessments  addAssessment[] // Corresponding relation field to addAssessment model
  manualAssessments ManualAssessment[] // Corresponding relation field to manualAssessment model
}


model addAssessment {
  id              Int       @id @default(autoincrement())
  title           String
  description     String
  courseId        Int       // Explicit foreign key to courses model
  course          courses   @relation(fields: [courseId], references: [id]) // Relation to courses model
  courseUnit      String
  courseUnitCode  String
  duration        String       // in minutes
  scheduledDate   DateTime
  startTime       DateTime
  endTime         DateTime
  createdBy       String
  createdAt       DateTime  @default(now())
  questions       Question[] @relation("AssessmentQuestions")
 
}

model Question {
  id              Int       @id @default(autoincrement())
  content         String
  answer          String?
  options         Json      // Store options for multiple choice questions
  assessmentId    Int       // Foreign key to addAssessment model
  assessment    addAssessment @relation("AssessmentQuestions", fields: [assessmentId], references: [id])
}


model ManualAssessment {
  id             Int             @id @default(autoincrement())
  title          String
  description    String
  courseId       Int
  course         courses          @relation(fields: [courseId], references: [id])
  courseUnit     String

  courseUnitCode String
  duration       Int             // in minutes

  scheduledDate  DateTime
  startTime      DateTime
  endTime        DateTime
  createdBy      Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  questions      QuestionManual[] // One-to-Many relationship to QuestionManual
}

model QuestionManual {
  id             Int             @id @default(autoincrement())
  questions      String            // Stores the question details
  options        Json            // Stores options for the questions
  correctAnswer  String          // The correct answer for the question
  assessmentId   Int             // Foreign key to ManualAssessment
  assessment     ManualAssessment @relation(fields: [assessmentId], references: [id])
}
